head(rin)
rin_df <- as.data.frame(rin)
head(rin_df)
rin$diff <- diff(rin)[2,]
rin <- pb_explore(1)
rin_df$diff <- diff(rin)
rin_df$diff <- diff(rin)[2,]
rin_df$diff <- diff(rin)[,2]
rin_df_diff <- diff(rin)
head(rin_df_diff)
rin_df$diff <- diff(rin[,2])[,2]
head(rin_df)
names(rin_df) <- c("order","number")
head(rin_df)
head(rin_df,15)
source("pb_explore.R")
rin <- pb_explore(1)
head(rin)
plot(rin)
source("pb_explore.R")
rin <- pb_explore(1)
plot(rin)
head(rin)
source("pb_explore.R")
rin <- pb_explore(1)
head(rin)
source("pb_explore.R")
rin <- pb_explore(1)
correlationResults <- vector(mode = "numeric")
for(j in 1:1000)
try(
{correlationResults[j] <- cor(rin[j+1,2], rin[j,2], use="complete" );}, silent = TRUE
)
head(correlationResults)
cor(rin[2,2], rin[1,2], use="complete")
cor(rin[1:5,2], rin[6:10,2], use="complete")
source("pb_explore.R")
rin <- pb_explore(1)
plot(rin)
qplot(rin)
head(rin)
?cor
sd(rin)
summary(rin)
source('D:/Data/readCSV.R')
dataIn2 <- read.csv(filenameIn, header=TRUE)
filenameIn <- file("2016Oct27_LDAP.csv","r")
dataIn1 <- read.csv(filenameIn, header=TRUE)
close(filenameIn)
unlink(filenameIn)
filenameIn <- file("2016Nov07_LDAP.csv","r")
dataIn2 <- read.csv(filenameIn, header=TRUE)
close(filenameIn)
unlink(filenameIn)
head(dataIn1)
names(dataIn1)
library(dplyr)
din1 <- select(dataIn1, uid)
din2 <- select(dataIn2, uid)
head(din1)
head(din2)
din1 <- arrange(uid)
din1 <- arrange(din1, uid)
head(din1)
din2 <- arrange(din2, uid)
head(din2)
diff(din1, din2)
length(din1)
length(din2)
nrows(din2)
head(din2)
str(din2)
dim(din2)
dim(din1)
library(swirl)
swirl()
sys.get("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, TRIE)
wday(this_day, TRuE)
wday(this_day, TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012)
""
"
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 7, minutes = 49, seconds = 55)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
deparse()
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
arrive
with_tz(arrive)
?with_tz
with_tz(arrive, tz ="Hong Kong")
with_tz(arrive, tz ="Asia/Hong Kong")
with_tz(arrive, tz ="Asia/Hong_Kong")
arrive <- with_tz(arrive, tz ="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Asia/Singaport")
last_time <- mdy("June 17, 2008", tz="Asia/Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
?unzip
#Create data directory, download the data file and unzip the data file
if (!file.exists("./data")){dir.create("./data")}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, destfile = "./data/dataset.zip", method = "curl")
#unzip dataset and overwrite any previous files that may exist
unzip("./data/dataset.zip", overwrite = TRUE)
?download.file
if (!file.exists("./data")){dir.create("./data")}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, destfile = "./data/dataset.zip", method = "auto")
#unzip dataset and overwrite any previous files that may exist
unzip("./data/dataset.zip", overwrite = TRUE)
#Create data directory, download the data file and unzip the data file
datsetfilename <- "./data/dataset.zip"
datadirectory <- "./data"
if (!file.exists(datadirectory)){dir.create(datadirectory)}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if (!file.exists(datsetfilename)){
download.file(fileURL, destfile = "./data/dataset.zip", method = "auto")
}
#unzip dataset and overwrite any previous files that may exist
unzip("./data/dataset.zip", exdir="./data", overwrite = TRUE)
#Create data directory, download the data file and unzip the data file
datsetfilename <- "./data/dataset.zip"
datadirectory <- "./data"
if (!file.exists(datadirectory)){dir.create(datadirectory)}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if (!file.exists(datsetfilename)){
download.file(fileURL, destfile = "./data/dataset.zip", method = "auto")
}
#unzip dataset and overwrite any previous files that may exist
unzip("./data/dataset.zip", exdir="./data", overwrite = TRUE)
unzip("./data/dataset.zip", exdir="./data", list = TRUE)
zipfiledirectorynames <- unzip("./data/dataset.zip", exdir="./data", list = TRUE)
zipfiledirectorynames
zipfiledirectorynames[,3]
zipfiledirectorynames[3,]
class(zipfiledirectorynames)
zipfiledirectorynames[Name %in% "features.txt",]
zipfiledirectorynames[zipfiledirectorynames$Name %in% "features.txt",]
zipfiledirectorynames[zipfiledirectorynames$Name %in% c("features.txt"),]
zipfiledirectorynames[zipfiledirectorynames$Name %in% c("features"),]
zipfiledirectorynames[,zipfiledirectorynames$Name %in% c("features")]
zipfiledirectorynames[zipfiledirectorynames$Name == "features.tx",]
zipfiledirectorynames[zipfiledirectorynames$Name == "UCI HAR Dataset/features.txt",]
?grep
zipfiledirectorynames[zipfiledirectorynames$Name == grep("*features.txt",zipfiledirectorynames$Name),]
zipfiledirectorynames[zipfiledirectorynames$Name == grep("*features.txt^",zipfiledirectorynames$Name),]
grep("*features.txt^",zipfiledirectorynames$Name)
grep("*features.txt?",zipfiledirectorynames$Name)
zipfiledirectorynames[zipfiledirectorynames$Name == grep("*features.txt?",zipfiledirectorynames$Name),]
zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),]
featurestable <- read.table(zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),1])
featurestable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),1]))
featurestable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),1], sep="/"))
head(featurestable)
colnames(featurestable) <- c("index","name")
head(featurestable)
activitylabelstable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*activity_labels.txt?",zipfiledirectorynames$Name),1], sep="/"))
colnames(activitylabelstable) <- c("index","name")
head(activitylabelstable)
colnames(featurestable) <- c("index","column")
colnames(activitylabelstable) <- c("index","activity")
head(activitylabelstable)
head(featurestable)
zipfiledirectorynames[3,]
zipfiledirectorynames
grep("*_train.txt?",zipfiledirectorynames$Name)
grep("*/*_train.txt?",zipfiledirectorynames$Name)
grep("*/X_*.txt?",zipfiledirectorynames$Name)
grep("*X_*.txt?",zipfiledirectorynames$Name)
grep("*X_*/.txt?",zipfiledirectorynames$Name)
grep("*X_*txt?",zipfiledirectorynames$Name)
grep("*[X_]*txt?",zipfiledirectorynames$Name)
grep("*X_*txt?",zipfiledirectorynames$Name)
grep("*/X_*?",zipfiledirectorynames$Name)
grep("*/Y_*?",zipfiledirectorynames$Name)
grep("*/y_*?",zipfiledirectorynames$Name)
grep("*/train/y_*?",zipfiledirectorynames$Name)
grep("*/test/y_*?",zipfiledirectorynames$Name)
grep("*/train/subject_train*?",zipfiledirectorynames$Name)
train_x_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_y_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_train*?",zipfiledirectorynames$Name),1], sep="/"))
head(train_x_table
)
head(train_y_table)
View(train_x_table)
## Load libraries that will be required for code
library(reshape2)
## Define data directory and dataset filename
datsetfilename <- "./data/dataset.zip"
datadirectory <- "./data"
## Check to see if data directory exists, if not create the data directory
if (!file.exists(datadirectory)){dir.create(datadirectory)}
## Define the URL that contains the dataset to be used for the script
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
## If the dataset zip file has already been downloaded, do not download it again
if (!file.exists(datsetfilename)){
download.file(fileURL, destfile = "./data/dataset.zip", method = "auto")
}
## Unzip the dataset zip file into the data directory and overwrite any previous files that may exist
unzip("./data/dataset.zip", exdir="./data", overwrite = TRUE)
## extract the directory paths into a data frame that can be used to build the path to the data files
zipfiledirectorynames <- unzip("./data/dataset.zip", exdir="./data", list = TRUE)
## Load column names from features.txt and label the columns
featurestable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),1], sep="/"))
colnames(featurestable) <- c("index","column")
## Load the activity labels from activity_labels.txt and label the columns
activitylabelstable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*activity_labels.txt?",zipfiledirectorynames$Name),1], sep="/"))
colnames(activitylabelstable) <- c("index","activity")
##Load X,y and subject train data
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_train*?",zipfiledirectorynames$Name),1], sep="/"))
##Load X,y and subject test data
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_train*?",zipfiledirectorynames$Name),1], sep="/"))
##Load X,y and subject train data
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_train*?",zipfiledirectorynames$Name),1], sep="/"))
##Load X,y and subject test data
test_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
test_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
test_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_train*?",zipfiledirectorynames$Name),1], sep="/"))
##Load X,y and subject train data
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
##Load X,y and subject test data
test_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
test_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
test_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
View(featurestable)
View(test_labels_table)
View(test_set_table)
colnames(test_set_table) <- featurestable[2,]
View(test_set_table)
colnames(test_set_table) <- featurestable[,2]
View(test_set_table)
head(test_set_table)
head(featurestable)
grep(".*mean.*|.*std.*", featurestable[,2]
)
colnames(train_set_table) <- featurestable[,2]
train_set_table_subset <- train_set_table[,grep(".*mean.*|.*std.*", featurestable[,2])]
View(train_set_table_subset)
featurestable_desc <- featurestable[,2]
featurestable_desc <-gsub("^t", "time", featurestable_desc)
featurestable_desc <-gsub("^f", "frequency", featurestable_desc)
featurestable_desc <-gsub("Acc", "Accelerometer", featurestable_desc)
featurestable_desc <-gsub("Gyro", "Gyroscope", featurestable_desc)
featurestable_desc <-gsub("Mag", "Magnitude", featurestable_desc)
featurestable_desc <-gsub("BodyBody", "Body", featurestable_desc)
featurestable_desc
## You should create one R script called run_analysis.R that does the following.
source('D:/Data/run_analysis.R')
View(train_set_table_subset)
View(train_set_table_subset)
View(test_labels_table)
View(activitylabelstable)
View(activitylabelstable)
source('D:/Data/run_analysis.R')
source('D:/Data/run_analysis.R')
source('D:/Data/run_analysis.R')
## You should create one R script called run_analysis.R that does the following.
## You should create one R script called run_analysis.R that does the following.
##
## Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
##
## The submitted data set is tidy.
## The Github repo contains the required scripts.
## GitHub contains a code book that modifies and updates the available codebooks with the data to indicate all the variables and summaries calculated,
## along with units, and any other relevant information.
## The README that explains the analysis files is clear and understandable.
## The work submitted for this project is the work of the student who submitted it.
## Load libraries that will be required for code
require(reshape2)
require(plyr)
require(knitr)
## Define data directory and dataset filename
datsetfilename <- "./data/dataset.zip"
datadirectory <- "./data"
## Check to see if data directory exists, if not create the data directory
if (!file.exists(datadirectory)){dir.create(datadirectory)}
## Define the URL that contains the dataset to be used for the script
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
## If the dataset zip file has already been downloaded, do not download it again
if (!file.exists(datsetfilename)){
download.file(fileURL, destfile = datsetfilename, method = "auto")
}
## Unzip the dataset zip file into the data directory and overwrite any previous files that may exist
unzip(datsetfilename, exdir=datadirectory, overwrite = TRUE)
## extract the directory paths into a data frame that can be used to build the path to the data files
zipfiledirectorynames <- unzip(datsetfilename, exdir=datadirectory, list = TRUE)
## Load column names from features.txt and label the columns
featurestable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*features.txt?",zipfiledirectorynames$Name),1], sep="/"))
colnames(featurestable) <- c("index","column")
## Create descriptive labels for the features columns
featurestable_desc <- featurestable[,2]
featurestable_desc <-gsub("^t", "time", featurestable_desc)
featurestable_desc <-gsub("^f", "frequency", featurestable_desc)
featurestable_desc <-gsub("Acc", "Accelerometer", featurestable_desc)
featurestable_desc <-gsub("Gyro", "Gyroscope", featurestable_desc)
featurestable_desc <-gsub("Mag", "Magnitude", featurestable_desc)
featurestable_desc <-gsub("BodyBody", "Body", featurestable_desc)
## Load the activity labels from activity_labels.txt and label the columns
activitylabelstable <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*activity_labels.txt?",zipfiledirectorynames$Name),1], sep="/"))
colnames(activitylabelstable) <- c("index","activityid")
## Load X,y and subject train data and extract the mean and standard deviation columns
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(train_set_table) <- featurestable_desc
train_set_table_subset <- train_set_table[,grep(".*mean.*|.*std.*", featurestable_desc)]
## Load X,y and subject test data and extract the mean and standard deviation columns
test_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
test_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
test_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(test_set_table) <- featurestable_desc
test_set_table_subset <- test_set_table[,grep(".*mean.*|.*std.*", featurestable_desc)]
## Join the train and test subject data, label the column names descriptively
traintest_subject <- rbind(train_subject_table, test_subject_table)
traintest_labels <- rbind(train_labels_table, test_labels_table)
colnames(traintest_subject) <- c("subject")
colnames(traintest_labels) <- c("activity")
## Join the train and test features data using the subset of columns with mean and stdev
traintest_features <- rbind(train_set_table_subset, test_set_table_subset)
## Join subject, activity and features data sets
subjectlabels <- cbind(traintest_subject, traintest_labels)
featuressubjectlabels <- cbind(traintest_features, subjectlabels) #Merged data set of train and test data
## Replace activity ID with activity labels
setWithActivityNames <- merge(featuressubjectlabels, activitylabelstable, by='activityid', all.x=TRUE)
setWithActivityNames <- merge(featuressubjectlabels, activitylabelstable, by="activityid", all.x=TRUE)
colnames(activitylabelstable) <- c("activityid","activity")
setWithActivityNames <- merge(featuressubjectlabels, activitylabelstable, by="activityid", all.x=TRUE)
source('D:/Data/run_analysis.R')
source('D:/Data/run_analysis.R')
View(setWithActivityNames)
View(subjectlabels)
View(traintest_labels)
View(traintest_subject)
View(setWithActivityNames)
setWithActivityNames.melted <- melt(setWithActivityNames, id = c("subject", "activity"))
setWithActivityNames.mean <- dcast(setWithActivityNames.melted, subject + activity ~ variable, mean)
warnings()
d1 <- aggregate(. ~subject + activity, setWithActivityNames, mean)
head(di)
head(d1)
activitylabelstable$activitydescription <- as.character(activitylabelstable$activitydescription)
setWithActivityNames <- merge(featuressubjectlabels, activitylabelstable, by="activity", all.x=TRUE)
d1 <- aggregate(. ~subject + activity, setWithActivityNames, mean)
head(d1)
source('D:/Data/run_analysis.R')
View(setWithActivityNames)
ncol(setWithActivityNames)
?select
library(dplyr)
library(plyr)
?select
ncol(setWithActivityNames)
select(setWithActivityNames,82,2:81)
head(select(setWithActivityNames,82,2:81),1)
head(select(setWithActivityNames,activitydescription, subject, featurestable_desc),1)
head(select(setWithActivityNames,activitydescription, subject, 2:80),1)
names(setWithActivityNames)
setWithActivityNames <- select(setWithActivityNames,activitydescription, subject, 2:80)
names(setWithActivityNames)
tail(setWithActivityNames)
?merge
?grep
source('D:/Data/run_analysis.R')
featurestable_desc
grep(".*mean()?|.*std()?", featurestable_desc)
View(test_set_table_subset)
featurestable_desc <- featurestable[,2]
featurestable_desc <-gsub("^t", "time", featurestable_desc)
featurestable_desc <-gsub("^f", "frequency", featurestable_desc)
featurestable_desc <-gsub("Acc", "Accelerometer", featurestable_desc)
featurestable_desc <-gsub("Gyro", "Gyroscope", featurestable_desc)
featurestable_desc <-gsub("Mag", "Magnitude", featurestable_desc)
featurestable_desc <-gsub("BodyBody", "Body", featurestable_desc)
featurestable_desc <-gsub("()", "", featurestable_desc)
grep(".*mean()?|.*std()?", featurestable_desc)
grep(".*mean?|.*std?", featurestable_desc)
featurestable_desc <-gsub("\\(\\)", "", featurestable_desc)
grep(".*mean?|.*std?", featurestable_desc)
featurestable_desc
grep("*mean?|*std?", featurestable_desc)
grep("*-mean|*-std", featurestable_desc)
featurestable_desc
## Load X,y and subject train data and extract the mean and standard deviation columns
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(train_set_table) <- featurestable_desc
train_set_table_subset <- train_set_table[,grep("*mean?|*std?", featurestable_desc)]
## Load X,y and subject test data and extract the mean and standard deviation columns
test_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
test_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
test_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(test_set_table) <- featurestable_desc
test_set_table_subset <- test_set_table[,grep("*mean?|*std?", featurestable_desc)]
View(train_set_table_subset)
## Load X,y and subject train data and extract the mean and standard deviation columns
train_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/X_*?",zipfiledirectorynames$Name),1], sep="/"))
train_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/y_*?",zipfiledirectorynames$Name),1], sep="/"))
train_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/train/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(train_set_table) <- featurestable_desc
train_set_table_subset <- train_set_table[,grep("*-mean-*|*std-*", featurestable_desc)]
## Load X,y and subject test data and extract the mean and standard deviation columns
test_set_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/X_*?",zipfiledirectorynames$Name),1], sep="/"))
test_labels_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/y_*?",zipfiledirectorynames$Name),1], sep="/"))
test_subject_table <- read.table(paste(datadirectory,zipfiledirectorynames[grep("*/test/subject_*?",zipfiledirectorynames$Name),1], sep="/"))
colnames(test_set_table) <- featurestable_desc
test_set_table_subset <- test_set_table[,grep("*-mean-?|*-std-*", featurestable_desc)]
View(traintest_features)
View(train_subject_table)
View(train_set_table_subset)
source('D:/Data/run_analysis.R')
source('D:/Data/run_analysis.R')
View(test_set_table_subset)
grep("*\\-mean\\-*|*\\-std\\-*", featurestable_desc)
featurestable_desc[,grep("*\\-mean\\-*|*\\-std\\-*", featurestable_desc)]
featurestable_desc[grep("*\\-mean\\-*|*\\-std\\-*", featurestable_desc)]
featurestable_desc[grep("\\-mean\\-|\\-std\\-", featurestable_desc)]
source('D:/Data/run_analysis.R')
View(featuressubjectlabels)
View(featurestable)
View(featurestable)
featurestable_desc[grep("\\-mean[\\-,?]|\\-std[\\-,?]", featurestable_desc)]
featurestable_desc[grep("\\-mean\\(\\)|\\-std\\(\\)", featurestable_desc)]
featurestable_desc[grep("mean\\(\\)|std\\(\\)", featurestable_desc)]
featurestable_desc[grep("*mean\\(\\)|*std\\(\\)", featurestable_desc)]
source('D:/Data/run_analysis.R')
View(setWithActivityNames)
finaldataset<-aggregate(. ~subject + activitydescription, setWithActivityNames, mean)
finaldataset<-finaldataset[order(finaldataset$subject,finaldataset$activitydescription),]
write.table(finaldataset, file = "finaldataset.txt",row.name=FALSE)
write.table(finaldataset, file = paste(datadirectory, "finaldataset.txt"),row.name=FALSE)
write.table(finaldataset, file = paste(datadirectory, "finaldataset.txt",sep = "/"),row.name=FALSE)
source('D:/Data/HAR_TidyDataset/2016_NOV_HAR_TidyDataset/run_analysis.R')
file.path(())
file.path()
?file.path
View(finaldataset)
package(knitr)
install.packages("knitr")
source('D:/Data/HAR_TidyDataset/2016_NOV_HAR_TidyDataset/run_analysis.R')
source('D:/Data/HAR_TidyDataset/2016_NOV_HAR_TidyDataset/run_analysis.R')
library(knitr)
knit2html("codebook.Rmd")
save.image("D:/Data/test.md.RData")
currentwd()
getwd()
setwd("D:/Data/HAR_TidyDataset/2016_NOV_HAR_TidyDataset")
source('D:/Data/HAR_TidyDataset/2016_NOV_HAR_TidyDataset/run_analysis.R')
library(knitr)
knit2html("codebook.md")
View(finaldataset)
names(finaldataset)
as.list(names(finaldataset))
as.data.frame(names(finaldataset))
as.data.frame(names(finaldataset), rows = FALSE)
?as.data.frame
as.data.frame(names(finaldataset), row.names = FALSE)
as.data.frame(names(finaldataset), row.names = NULL)
as.data.frame(names(finaldataset), row.name = FALSE)
